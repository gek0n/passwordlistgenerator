//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PasswordListGenerator.Properties {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("PasswordListGenerator.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на -i
        ///		Use this option if you want to substitute many words typed form keyboard or loaded from input stream.
        ///		For example, if you type :PasswordListGenerator subs -i
        ///		You will see folowing:
        ///		Selected method is GoodLeet
        ///		
        ///		Now you can type any word or symbol and substitutions will appear in the console:
        ///		&lt;Q&gt; (typed)
        ///		Q
        ///		(,)
        ///		&lt;B&gt; (typed)
        ///		B
        ///		|3
        ///		8
        ///		&lt;q&gt; (typed)
        ///		[ERROR]: The symbol &quot;q&quot; is not in the dictionary. Please specify other dictionary or use
        ///		ignore-case option
        ///
        ///		&lt;Enter&gt; [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string AdditionalSubs_i_Usages {
            get {
                return ResourceManager.GetString("AdditionalSubs_i_Usages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на -d, --dict
        ///		Use this option to specify file, that contains json data in folowing format:
        ///		{
        ///			&quot;method_1&quot;: {
        ///				&quot;A&quot;: [
        ///					&quot;a&quot;,
        ///					&quot;/-\&quot;,
        ///				],
        ///				&quot;1&quot;: [
        ///					&quot;|&quot;,
        ///					&quot;i&quot;,
        ///					&quot;I&quot;
        ///				]
        ///				...
        ///			},
        ///			&quot;method_2&quot;: {
        ///				&quot;A&quot;: [...],
        ///				...
        ///			},
        ///			...
        ///		}
        ///
        ///		Now if you type: PasswordListGenerator subs -d dictFilename.json -m method_1 A
        ///		You will see folowing text in console:
        ///		A
        ///		a
        ///		/-\
        ///		It&apos;s all possible substitutions for symbol &quot;A&quot; in method &quot;method_1&quot;, specifie [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string AdditionalSubsDictUsage {
            get {
                return ResourceManager.GetString("AdditionalSubsDictUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на -m, --method
        ///		Use this option to specify method, that containing dictionaty of symbols with all possible substitutions
        ///		for each. If you specify file with user dictionary, then you must use methods, written in this file
        ///		(see -d option). If method does not specified, default method will be used. First method in dictionary
        ///		will be used as default. In default file &quot;GoodLeet&quot; method is used by default.
        ///.
        /// </summary>
        internal static string AdditionalSubsMethodUsage {
            get {
                return ResourceManager.GetString("AdditionalSubsMethodUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Additional information for options:.
        /// </summary>
        internal static string additionalUsage {
            get {
                return ResourceManager.GetString("additionalUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Error using {0} encoding. Fallback to utf-8.
        /// </summary>
        internal static string encodingFallback {
            get {
                return ResourceManager.GetString("encodingFallback", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на {
        ///	&quot;GoodLeet&quot;: {
        ///		&quot;A&quot;: [
        ///			&quot;4&quot;,
        ///			&quot;/\\&quot;,
        ///			&quot;@&quot;,
        ///			&quot;/-\\&quot;
        ///		],
        ///		&quot;B&quot;: [
        ///			&quot;|3&quot;,
        ///			&quot;8&quot;
        ///		],
        ///		&quot;C&quot;: [
        ///			&quot;[&quot;,
        ///			&quot;{&quot;,
        ///			&quot;(&quot;,
        ///			&quot;&lt;&quot;
        ///		],
        ///		&quot;D&quot;: [
        ///			&quot;|)&quot;,
        ///			&quot;|}&quot;,
        ///			&quot;|]&quot;,
        ///			&quot;|&gt;&quot;
        ///		],
        ///		&quot;E&quot;: [
        ///			&quot;3&quot;
        ///		],
        ///		&quot;F&quot;: [
        ///			&quot;|=&quot;,
        ///			&quot;/=&quot;
        ///		],
        ///		&quot;G&quot;: [
        ///			&quot;9&quot;,
        ///			&quot;6&quot;
        ///		],
        ///		&quot;H&quot;: [
        ///			&quot;/-/&quot;,
        ///			&quot;]-[&quot;,
        ///			&quot;|-|&quot;,
        ///			&quot;\\-\\&quot;,
        ///			&quot;}-{&quot;,
        ///			&quot;)-(&quot;,
        ///			&quot;!-!&quot;,
        ///			&quot;/~/&quot;,
        ///			&quot;]~[&quot;,
        ///			&quot;|~|&quot;,
        ///			&quot;\\~\\&quot;,
        ///			&quot;}~{&quot;,
        ///			&quot;)~(&quot;
        ///		],
        ///		&quot;I&quot;: [
        ///			&quot;|&quot;,
        ///			&quot;1&quot;,
        ///			&quot;!&quot;
        ///		],
        ///	 [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string EnglishLeetDict {
            get {
                return ResourceManager.GetString("EnglishLeetDict", resourceCulture);
            }
        }
    }
}
